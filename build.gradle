import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'org.sonarqube' version '3.0'
	id 'jacoco'
}

group = 'com.expleo.turistmo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

test {
	useJUnitPlatform()
	reports.html.enabled(true)
	finalizedBy(jacocoTestReport)
}

jacoco {
	toolVersion = "0.8.5"
	reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport (){
	dependsOn(test)
	reports {
		xml.enabled true
		csv.enabled false
		html.destination file ("${buildDir}/jacocoHtml")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: '**/TuristmoApplication.*')
		}))
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "TuristMO_turistmo"
		property "sonar.organization", "TuristMO"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.jacoco.xmlReportsPath","build/customJacocoReportsDir/test/jacocoTestReport.xml"
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testCompile("org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.1.3")
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

task stage {
	doFirst { clean }
	dependsOn(build)
	dependsOn(jacocoTestReport)
}

tasks.withType(Test) {
	testLogging {
		testLogging.events.add(TestLogEvent.PASSED)
		testLogging.events.add(TestLogEvent.FAILED)
		testLogging.events.add(TestLogEvent.SKIPPED)
		testLogging.exceptionFormat(TestExceptionFormat.FULL)
		testLogging.showCauses(true)
		testLogging.showExceptions(true)
		testLogging.showStackTraces(true)
	}
}

test {
	useJUnitPlatform()
}

compileJava
compileTestJava
jacocoTestReport
